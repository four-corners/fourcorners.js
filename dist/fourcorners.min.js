var FourCorners;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 579:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

__webpack_require__(666);

__webpack_require__(387);

var FourCorners = /*#__PURE__*/function () {
  function FourCorners(elem, opts, metadata) {
    _classCallCheck(this, FourCorners);

    this.elems = {};
    this.elems.img = this.addImg(elem);
    this.elems.embed = this.addWrapper(elem);
    this.lang = opts.lang || "en";
    this.strings = STRINGS[this.lang];
    this.data = metadata ? this.parseMetaData(metadata) : this.parseJsonData();
    this.opts = _objectSpread(_objectSpread(_objectSpread({}, DEFAULT_OPTS), opts), this.data.opts);
    this.elems.panels = this.addPanels();
    this.elems.corners = this.addCorners();
    this.elems.cutline = this.addCutline();
    this.addEmbeddedMedia();
    this.addInteractivity();
    if (this.opts.dark) this.elems.embed.classList.add("fc-dark");
    this.elems.embed.classList.add("fc-init");
  } //DATA HANDLING


  _createClass(FourCorners, [{
    key: "parseJsonData",
    value: function parseJsonData() {
      var embed = this.elems.embed;
      var script = embed.querySelector("script");

      if (script) {
        //If embed JSON is stored in child script tag
        stringData = script.innerHTML;
        script.remove();
      } else if (embed.hasAttribute("data-fc")) {
        //If embed JSON is stored in data-fc attributte
        stringData = embed.dataset.fc;
        delete embed.dataset.fc;
      }

      if (!stringData) return;
      return JSON.parse(stringData);
    }
  }, {
    key: "parseMetaData",
    value: function parseMetaData(rawMeta) {
      var metadata;

      if (rawMeta) {
        rawMeta.claims.forEach(function (claim, key) {
          metadata = claim.assertions.get("org.fourcorners.context").data;
        });
      }

      var parseMetaArray = function parseMetaArray(arr) {
        if (arr) {
          arr = arr.map(function (obj) {
            var newObj = {};
            var keys = Object.keys(obj).map(function (k, i) {
              var splitArr = k.replace("fourcorners:", "").split(/(?=[A-Z])/);
              var newKey = splitArr[splitArr.length - 1].toLowerCase();
              newObj[newKey] = obj[k];
            });
            return newObj;
          });
        }

        return arr;
      };

      var getMetaValue = function getMetaValue(key) {
        var value;

        var searchKeys = function searchKeys(obj, key) {
          if (_typeof(obj) !== "object") return;
          Object.keys(obj).forEach(function (k) {
            if (k === key) {
              return value = obj[k];
            }

            if (_typeof(obj[k]) === "object") {
              return searchKeys(obj[k], key);
            }
          });
        };

        searchKeys(metadata, key);
        return value;
      };

      var data = {
        "authorship": {
          "caption": getMetaValue("fourcorners:authorshipCaption"),
          "credit": getMetaValue("fourcorners:authorshipCredit"),
          "license": {
            "type": getMetaValue("fourcorners:authorshipLicenseType"),
            "year": getMetaValue("fourcorners:authorshipLicenseYear"),
            "holder": getMetaValue("fourcorners:authorshipLicenseHolder"),
            "label": getMetaValue("fourcorners:authorshipLicenseLabel"),
            "desc": getMetaValue("fourcorners:authorshipLicenseDesc"),
            "url": getMetaValue("fourcorners:authorshipLicenseUrl")
          },
          "ethics": {
            "label": getMetaValue("fourcorners:authorshipEthicsLabel"),
            "desc": getMetaValue("fourcorners:authorshipEthicsDescription")
          },
          "bio": getMetaValue("fourcorners:authorshipBio"),
          "website": getMetaValue("fourcorners:authorshipWebsite"),
          "contactInfo": getMetaValue("fourcorners:authorshipContactInfo"),
          "contactRights": getMetaValue("fourcorners:authorshipContactRights")
        },
        "backstory": {
          "text": getMetaValue("fourcorners:backstoryText"),
          "media": parseMetaArray(getMetaValue("fourcorners:backstoryMedia"))
        },
        "imagery": {
          "media": parseMetaArray(getMetaValue("fourcorners:imageryMedia"))
        },
        "links": {
          "links": parseMetaArray(getMetaValue("fourcorners:linksLinks"))
        }
      };
      return data;
    } //BUILDING DOM ELEMENTS

  }, {
    key: "addImg",
    value: function addImg(elem) {
      if (elem.tagName === "IMG") {
        return elem;
      } else {
        return elem.querySelector("img");
      }
    }
  }, {
    key: "addWrapper",
    value: function addWrapper(elem) {
      var embed;

      if (elem.tagName === "IMG") {
        embed = document.createElement("div");

        var _elem$getBoundingClie = elem.getBoundingClientRect(),
            width = _elem$getBoundingClie.width,
            height = _elem$getBoundingClie.height;

        embed.style.width = "".concat(width, "px");
        embed.style.height = "".concat(height, "px");
        elem.parentNode.insertBefore(embed, elem);
        embed.appendChild(elem);
        embed.classList.add("fc-embed");
      } else {
        embed = elem;
      }

      return embed;
    }
  }, {
    key: "insertCornerSvg",
    value: function insertCornerSvg() {
      var iconSvg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      var iconPath = document.createElementNS("http://www.w3.org/2000/svg", "path");
      iconSvg.setAttribute("viewBox", "0 0 100 100");
      iconPath.setAttribute("d", "M75 24.75H0.25V0.25H75H99.75V25V99.75H75.25L75.25 25V24.75H75Z");
      iconSvg.appendChild(iconPath);
      return iconSvg;
    }
  }, {
    key: "addCorners",
    value: function addCorners() {
      var corners = {},
          data = this.data,
          strings = this.strings,
          elems = this.elems,
          embed = elems.embed;
      CORNER_KEYS.forEach(function (cornerKey) {
        var cornerTitle = strings[cornerKey] || null,
            cornerElem = document.createElement("div"); // cornerSvg = this.insertCornerSvg();
        // cornerSvg = require("./svg/corner.svg");
        // cornerSvg = `<svg width="100" height="100" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M75 24.75H0.25V0.25H75H99.75V25V99.75H75.25L75.25 25V24.75H75Z" fill="white" stroke="black" stroke-width="0.5"/></svg>`;

        cornerElem.setAttribute("data-fc-key", cornerKey);
        cornerElem.title = "View ".concat(cornerTitle);
        cornerElem.classList.add("fc-corner", "fc-".concat(cornerKey)); // cornerElem.appendChild(cornerSvg);

        var cornerIsEmpty = function () {
          if (data.hasOwnProperty(cornerKey)) {
            if (Object.keys(data[cornerKey]).length) return false;
            return true;
          } else {
            return true;
          }
        }();

        if (cornerIsEmpty) {
          cornerElem.classList.add("fc-empty");
        }

        embed.appendChild(cornerElem);
        corners[cornerKey] = cornerElem;
      });
      return corners;
    }
  }, {
    key: "addPanels",
    value: function addPanels() {
      var _this = this;

      var data = this.data,
          strings = this.strings,
          elems = this.elems,
          embed = elems.embed,
          panels = {};
      CORNER_KEYS.forEach(function (cornerKey) {
        var cornerTitle = strings[cornerKey] || null;
        var panelInner = "";

        switch (cornerKey) {
          case "authorship":
            panelInner = _this.buildAuthorship();
            break;

          case "backstory":
            panelInner = _this.buildBackstory();
            break;

          case "imagery":
            panelInner = _this.buildImagery();
            break;

          case "links":
            panelInner = _this.buildLinks();
            break;
        }

        var panelTile = strings[cornerKey];
        var panelClass = "fc-panel fc-".concat(cornerKey);
        var panelHTML = "<div data-fc-key=\"".concat(cornerKey, "\" class=\"").concat(panelClass, "\">\n\t\t\t\t\t<div class=\"fc-panel-title\">\n\t\t\t\t\t\t<span>").concat(panelTile, "</span>\n\t\t\t\t\t\t<div class=\"fc-icon fc-expand\" title=\"Expand this panel\"></div>\n\t\t\t\t\t\t<div class=\"fc-icon fc-close\" title=\"Close this panel\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"fc-panel-title fc-pseudo\">\n\t\t\t\t\t\t<span>").concat(CORNER_KEYS.indexOf(cornerKey), "</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t").concat(panelInner ? "<div class=\"fc-scroll\">\n\t\t\t\t\t\t\t<div class=\"fc-inner ".concat(cornerKey === "imagery" || cornerKey === "links" ? "fc-grid" : "", "\">\n\t\t\t\t\t\t\t\t").concat(panelInner, "\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>") : "", "\n\t\t\t\t</div>");
        elems.embed.innerHTML += panelHTML;
        panels[cornerKey] = _this.getPanel(cornerKey);
      });
      return panels;
    }
  }, {
    key: "buildAuthorship",
    value: function buildAuthorship() {
      var _this$data$authorship = this.data.authorship,
          caption = _this$data$authorship.caption,
          credit = _this$data$authorship.credit,
          bio = _this$data$authorship.bio,
          ethics = _this$data$authorship.ethics,
          website = _this$data$authorship.website,
          license = _this$data$authorship.license;
      var hasInfoCard = credit && (ethics && ethics.desc || bio || website);
      var html = "<div class=\"fc-row\">\n\t\t\t\t".concat(caption ? "<div class=\"fc-field\">\n\t\t\t\t\t\t<span class=\"fc-label\">\n\t\t\t\t\t\t\t".concat(this.strings.caption, ":\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span class=\"fc-content\">\n\t\t\t\t\t\t\t").concat(caption, "\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>") : "", "\n\n\t\t\t\t").concat(hasInfoCard ? "<details class=\"fc-details\">\n\n\t\t\t\t\t\t<summary class=\"fc-summary\">\n\t\t\t\t\t\t\t<div class=\"fc-field\">\n\t\t\t\t\t\t\t\t<span class=\"fc-label\">\n\t\t\t\t\t\t\t\t\t".concat(this.strings.credit, ":\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span class=\"fc-content\">\n\t\t\t\t\t\t\t\t\t").concat(credit ? credit : "Unknown", "\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<div class=\"fc-icon fc-expand\" title=\"Read more about ").concat(credit, "\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</summary>\n\n\t\t\t\t\t\t<div class=\"fc-card\">\n\n\t\t\t\t\t\t\t").concat(bio ? "<div class=\"fc-field\">\n\t\t\t\t\t\t\t\t\t<span class=\"fc-label\">\n\t\t\t\t\t\t\t\t\t\t".concat(this.strings.bio, ":\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t<span class=\"fc-content\">\n\t\t\t\t\t\t\t\t\t\t").concat(bio, "\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</div>") : "", "\n\n\t\t\t\t\t\t\t").concat(ethics && ethics.desc ? "<div class=\"fc-field\">\n\t\t\t\t\t\t\t\t\t<span class=\"fc-label\">\n\t\t\t\t\t\t\t\t\t\t".concat(this.strings.coe, ":\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t<span class=\"fc-content\">\n\t\t\t\t\t\t\t\t\t\t").concat(ethics.desc, "\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</div>") : "", "\n\n\t\t\t\t\t\t\t").concat(website ? "<div class=\"fc-field\">\n\t\t\t\t\t\t\t\t\t<span class=\"fc-label\">\n\t\t\t\t\t\t\t\t\t\t".concat(this.strings.website, ":\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t<span class=\"fc-content\">\n\t\t\t\t\t\t\t\t\t\t").concat(this.createLink(website), "\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</div>") : "", "\n\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</details>") : "<div class=\"fc-field\">\n\t\t\t\t\t\t<span class=\"fc-label\">\n\t\t\t\t\t\t\t".concat(this.strings.credit, ":\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span class=\"fc-content\">\n\t\t\t\t\t\t\t").concat(credit ? credit : "Unknown", "\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>"), "\n\n\t\t\t\t").concat(license && license.type ? "<div class=\"fc-field\">\n\t\t\t\t\t\t<span class=\"fc-label\">\n\t\t\t\t\t\t\t".concat(this.strings.license, ":\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span class=\"fc-content\">\n\t\t\t\t\t\t\t").concat(license.type === "copyright" ? "&#169;\n\t\t\t\t\t\t\t\t".concat(license.holder ? "".concat(license.holder).concat(license.year ? ", ".concat(license.year) : "") : "".concat(credit).concat(license.year ? ", ".concat(license.year) : "")) : "", "\n\t\t\t\t\t\t\t").concat(license.type === "commons" ? "".concat(license.url ? "<a href=\"".concat(license.url, "\" target=\"_blank\">\n\t\t\t\t\t\t\t\t\t\t").concat(license.label ? license.label : "", "\n\t\t\t\t\t\t\t\t\t</a>") : license.label ? license.label : "") : "", "\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>") : "", "\n\t\t\t</div>");
      return html;
    }
  }, {
    key: "buildBackstory",
    value: function buildBackstory() {
      var _this2 = this;

      var _this$data$backstory = this.data.backstory,
          text = _this$data$backstory.text,
          media = _this$data$backstory.media;
      var html = "".concat(text ? "<div class=\"fc-row\">\n\t\t\t\t".concat(this.insertParagraphs(text), "\n\t\t\t</div>") : "", "\n\t\t\t").concat(media ? media.map(function (obj, index) {
        _this2.embedExternal(_this2, obj, "backstory", index);

        return "<div class=\"fc-row\">\n\t\t\t\t\t\t<div class=\"fc-media\">\n\t\t\t\t\t\t\t<div class=\"fc-media-embed\" data-fc-source=\"".concat(obj.source, "\" data-fc-url=\"").concat(obj.url, "\" data-fc-index=\"").concat(index, "\"></div>\n\t\t\t\t\t\t\t").concat(obj.caption || obj.credit ? "<div class=\"fc-media-info\">\n\t\t\t\t\t\t\t\t\t".concat(obj.caption ? "<div class=\"fc-sub-caption\">".concat(obj.caption, "</div>") : "", "\n\t\t\t\t\t\t\t\t\t").concat(obj.credit ? "<div class=\"fc-sub-credit\">".concat(obj.credit, "</div>") : "", "\n\t\t\t\t\t\t\t\t</div>") : "", "\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>");
      }).join("") : "");
      return html;
    }
  }, {
    key: "buildImagery",
    value: function buildImagery() {
      var _this3 = this;

      var media = this.data.imagery.media;
      var html = "".concat(media ? media.map(function (obj, index) {
        var isExternal = ["instagram", "youtube", "vimeo"].includes(obj.source);
        return "<div class=\"fc-row\">\n\t\t\t\t\t\t<div class=\"fc-media\">\n\t\t\t\t\t\t\t<div class=\"fc-media-embed\" data-fc-source=\"".concat(obj.source, "\" data-fc-url=\"").concat(obj.url, "\" data-fc-index=\"").concat(index, "\">\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t").concat(obj.caption || obj.credit ? "<div class=\"fc-media-info\">\n\t\t\t\t\t\t\t\t\t".concat(obj.caption ? "<div class=\"fc-sub-caption\">".concat(obj.caption, "</div>") : "", "\n\t\t\t\t\t\t\t\t\t").concat(obj.credit ? "<div class=\"fc-sub-credit\">".concat(obj.credit, "</div>") : "", "\n\t\t\t\t\t\t\t\t\t").concat(isExternal ? "<div class=\"fc-sub-credit\">\n\t\t\t\t\t\t\t\t\t\t\t".concat(isExternal && obj.url ? "<a href=\"".concat(obj.url, "\" target=\"_blank\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tView on ").concat(_this3.extractRootDomain(obj.url), "\n\t\t\t\t\t\t\t\t\t\t\t\t</a>") : "", "\n\t\t\t\t\t\t\t\t\t\t\t").concat(isExternal && !obj.url ? "View on ".concat(_this3.extractRootDomain(obj.url)) : "", "\n\t\t\t\t\t\t\t\t\t\t</div>") : "", "\n\t\t\t\t\t\t\t\t</div>") : "", "\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>");
      }).join("") : "");
      return html;
    }
  }, {
    key: "buildLinks",
    value: function buildLinks() {
      var _this4 = this;

      var links = this.data.links.links;
      var html = "".concat(links ? links.filter(function (obj) {
        return obj.url;
      }).map(function (obj, index) {
        var simpleUrl = _this4.simplifyUrl(obj.url);

        var text = "".concat(obj.title ? obj.title : simpleUrl, "<div class=\"fc-sub-url\">").concat(simpleUrl, "</div>");
        return "<div class=\"fc-row\">\n\t\t\t\t\t\t\t".concat(_this4.createLink(obj.url, text, ["fc-card"]), "\n\t\t\t\t\t\t</div>");
      }).join("") : "");
      return html;
    }
  }, {
    key: "addCutline",
    value: function addCutline() {
      var data = this.data,
          elems = this.elems,
          opts = this.opts,
          embed = elems.embed,
          _data$authorship = data.authorship,
          credit = _data$authorship.credit,
          caption = _data$authorship.caption,
          license = _data$authorship.license,
          showCaption = opts.caption && caption,
          showCredit = opts.credit && credit,
          showLicense = opts.license && license.holder && credit !== license.holder,
          showLogo = opts.logo;
      var html = "".concat(showCaption || showCredit || showLogo ? "<div class=\"fc-cutline\">\n\t\t\t\t\t".concat(showCaption ? "<span class=\"fc-caption\">\n\t\t\t\t\t\t\t".concat(showCaption ? "<span>".concat(caption, "</span>") : "", "\n\t\t\t\t\t\t</span>") : "", "\n\t\t\t\t\t").concat(showCredit ? "<span class=\"fc-credit\">\n\t\t\t\t\t\t\t".concat(showCredit ? "<span>".concat(credit, "</span>") : "", "\n\t\t\t\t\t\t\t").concat(showCredit && showLicense ? "/" : "", "\n\t\t\t\t\t\t\t").concat(showLicense ? "<span>".concat(license.holder, "</span>") : "", "\n\t\t\t\t\t\t</span>") : "", "\n\t\t\t\t\t").concat(showLogo ? "<a href=\"https://fourcornersproject.org\" target=\"_blank\" class=\"fc-logo\" title=\"This is a Four Corners Project photo\">\n\t\t\t\t\t\t\t<span>Four Corners Project</span>\n\t\t\t\t\t\t</a>" : "", "\n\t\t\t\t</div>") : "");
      embed.insertAdjacentHTML("afterend", html);
      return embed.querySelector(".fc-cutline");
    }
  }, {
    key: "addEmbeddedMedia",
    value: function addEmbeddedMedia() {
      var _this5 = this;

      ["imagery", "backstory"].forEach(function (panelKey) {
        var panel = _this5.getPanel(panelKey);

        var mediaWrappers = panel.querySelectorAll(".fc-media-embed");
        mediaWrappers.forEach(function (elem) {
          var _elem$dataset = elem.dataset,
              fcSource = _elem$dataset.fcSource,
              fcUrl = _elem$dataset.fcUrl,
              fcIndex = _elem$dataset.fcIndex;
          var obj = {
            source: fcSource,
            url: fcUrl,
            index: fcIndex
          };

          if (obj.source === "image") {
            _this5.insertMediaImage(obj, panelKey);
          } else {
            _this5.insertMediaEmbed(obj, panelKey);
          }
        });
      });
    }
  }, {
    key: "insertMediaImage",
    value: function insertMediaImage(obj, panelKey) {
      var panel = this.getPanel(panelKey),
          subMedia = panel.querySelectorAll(".fc-media-embed")[obj.index],
          pseudoImg = new Image();
      var html = "";

      pseudoImg.onload = function () {
        html = "<img src=\"".concat(obj.url, "\" />");
        subMedia.innerHTML = html;
      };

      pseudoImg.onerror = function () {
        subMedia.parentNode.remove();
        console.warn("Four Corners cannot load this media.", {
          url: obj.url,
          error: "Embedding failed and was removed from the imagery panel"
        });
      };

      pseudoImg.src = obj.url;
    }
  }, {
    key: "insertMediaEmbed",
    value: function insertMediaEmbed(obj, panelKey) {
      var _this6 = this;

      //requests third party APIs to retrieve embed data
      var req = "";

      switch (obj.source) {
        case "youtube":
          req = "https://noembed.com/embed?url=" + obj.url;
          break;

        case "vimeo":
          req = "https://vimeo.com/api/oembed.json?url=" + obj.url;
          break;

        case "soundcloud":
          req = "https://soundcloud.com/oembed?format=json&url=" + obj.url;
          break;

        case "instagram":
          req = "https://api.instagram.com/oembed/?url=" + obj.url;
          break;

        default:
          return false;
          break;
      }

      var headers = new Headers();
      console.log(req);
      fetch(req, {
        method: "GET",
        headers: headers
      }).then(function (res) {
        if (!res.ok) {
          throw Error(res.statusText);
        }

        return res.json();
      }).then(function (res) {
        var panel = _this6.getPanel(panelKey),
            subMedia = panel.querySelectorAll(".fc-media-embed")[obj.index];

        var html = "";

        if (obj.source == "instagram") {
          html = "<img src=\"".concat(res.thumbnail_url, "\"/>");
        } else {
          html = res.html;
        }

        if (Number.isInteger(res.width, res.height)) {
          var ratio = res.height / res.width;
          subMedia.classList.add("fc-responsive");
          subMedia.style.paddingBottom = "".concat(ratio * 100, "%");
        }

        if (html) {
          subMedia.innerHTML = html;
        } else {
          subMedia.parentNode.remove();
          console.warn("Four Corners cannot load this media.", {
            url: obj.url,
            error: "Embedding failed and was removed from the ".concat(panelKey, " panel")
          });
        }
      })["catch"](function (err) {
        console.warn("Four Corners cannot load this media.", {
          url: obj.url,
          error: err
        });
      });
    }
  }, {
    key: "insertParagraphs",
    value: function insertParagraphs(val) {
      var array = val.split(/\n/g);
      var text = [];
      var html = array ? "".concat(array.map(function (str, i) {
        return str ? "<p>".concat(str, "</p>") : "<br/>";
      }).join("")) : "";
      return html;
    }
  }, {
    key: "createLink",
    value: function createLink(href, text) {
      var classes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

      if (!text) {
        text = this.simplifyUrl(href);
      }

      if (this.validateEmail(href)) {
        href = "mailto:".concat(href);
      }

      return "<a href=\"".concat(href, "\" target=\"_blank\" class=\"").concat(classes.join(" "), "\">").concat(text, "</a>");
    } //INTERACTIVITY

  }, {
    key: "addInteractivity",
    value: function addInteractivity() {
      var _this7 = this;

      CORNER_KEYS.forEach(function (key) {
        var panel = _this7.getPanel(key);

        var corner = _this7.elems.corners[key];
        panel.querySelector(".fc-expand").addEventListener("click", function () {
          _this7.toggleExpandPanel();
        });
        panel.querySelector(".fc-close").addEventListener("click", function () {
          _this7.closePanel(key); // this.elems.embed.classList.remove("fc-full");

        });
        corner.addEventListener("mouseenter", _this7.hoverCorner.bind(_this7));
        corner.addEventListener("mouseleave", _this7.unhoverCorner.bind(_this7));
        corner.addEventListener("click", _this7.clickCorner.bind(_this7));
        corner.classList.add("fc-interactive");
      });
      this.elems.embed.addEventListener("click", function (e) {
        var onPanels = _this7.isChildOf(e.target, _this7.getPanels());

        var onCorners = _this7.isChildOf(e.target, _this7.elems.corners);

        if (!onPanels && !onCorners) {
          _this7.closePanels();
        }
      });
      this.elems.embed;
    }
  }, {
    key: "openPanel",
    value: function openPanel(cornerKey) {
      var _this8 = this;

      var elems = this.elems,
          embed = elems.embed,
          corners = elems.corners,
          panels = elems.panels,
          corner = elems.corners[cornerKey],
          panel = this.getPanel(cornerKey);
      embed.classList.remove("fc-full");
      embed.classList.add("fc-active");
      embed.setAttribute("data-fc-active", cornerKey);
      corner.classList.add("fc-active");
      panel.classList.add("fc-active");
      CORNER_KEYS.forEach(function (key) {
        if (key !== cornerKey) _this8.closePanel(key);
      });
    }
  }, {
    key: "closePanel",
    value: function closePanel(cornerKey) {
      var elems = this.elems,
          embed = elems.embed,
          corners = elems.corners,
          panels = elems.panels,
          corner = corners[cornerKey],
          panel = this.getPanel(cornerKey);
      corner.classList.remove("fc-active");
      panel.classList.remove("fc-active");
      embed.classList.remove("fc-active");
      embed.setAttribute("data-fc-active", "");
      setTimeout(function () {
        return embed.classList.remove("fc-full");
      });
    }
  }, {
    key: "closePanels",
    value: function closePanels() {
      var _this9 = this;

      CORNER_KEYS.forEach(function (cornerKeys) {
        return _this9.closePanel(cornerKeys);
      });
    }
  }, {
    key: "toggleExpandPanel",
    value: function toggleExpandPanel() {
      this.elems.embed.classList.toggle("fc-full");
    }
  }, {
    key: "hoverCorner",
    value: function hoverCorner(e) {
      var cornerElem = e.target;
      cornerElem.classList.add("fc-hover");
    }
  }, {
    key: "unhoverCorner",
    value: function unhoverCorner(e) {
      var cornerElem = e.target;
      cornerElem.classList.remove("fc-hover");
    }
  }, {
    key: "clickCorner",
    value: function clickCorner(e) {
      var cornerElem = e.target,
          cornerKey = cornerElem.getAttribute("data-fc-key"),
          activeKey = this.elems.embed.getAttribute("data-fc-active");

      if (cornerKey === activeKey) {
        this.closePanel(cornerKey);
      } else {
        this.openPanel(cornerKey);
      }
    } //HELPERS

  }, {
    key: "getPanel",
    value: function getPanel(cornerKey) {
      return this.elems.embed.querySelector(".fc-panel[data-fc-key=\"".concat(cornerKey, "\"]"));
    }
  }, {
    key: "getPanels",
    value: function getPanels() {
      return Array.from(this.elems.embed.querySelectorAll(".fc-panel"));
    }
  }, {
    key: "isChildOf",
    value: function isChildOf(target, ref) {
      var answer = false;
      Object.entries(ref).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            elem = _ref2[1];

        if (elem && elem.contains && elem.contains(target)) {
          answer = true;
        }
      });
      return answer;
    }
  }, {
    key: "validateEmail",
    value: function validateEmail(string) {
      return String(string).toLowerCase().match(/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/);
    }
  }, {
    key: "simplifyUrl",
    value: function simplifyUrl(url) {
      return url.replace("www.", "").replace(/^https?:\/\//, "");
    }
  }, {
    key: "extractHostname",
    value: function extractHostname(url) {
      var hostname;
      if (!url) return null;

      if (url.indexOf("//") > -1) {
        hostname = url.split("/")[2];
      } else {
        hostname = url.split("/")[0];
      }

      hostname = hostname.split(":")[0];
      hostname = hostname.split("?")[0];
      return hostname;
    }
  }, {
    key: "extractRootDomain",
    value: function extractRootDomain(url) {
      if (!url) return null;
      var domain = this.extractHostname(url);
      var splitArr = domain.split(".");
      var arrLen = splitArr.length;

      if (arrLen > 2) {
        domain = splitArr[arrLen - 2] + "." + splitArr[arrLen - 1];

        if (splitArr[arrLen - 2].length == 2 && splitArr[arrLen - 1].length == 2) {
          domain = splitArr[arrLen - 3] + "." + domain;
        }
      }

      return domain;
    }
  }]);

  return FourCorners;
}();

var CORNER_KEYS = ["authorship", "backstory", "imagery", "links"];
var STRINGS = {
  en: {
    authorship: "Authorship",
    backstory: "Backstory",
    imagery: "Related Imagery",
    links: "Links",
    caption: "Caption",
    credit: "Credit",
    license: "License",
    coe: "Code of ethics",
    bio: "About the photographer",
    website: "Website",
    info: "For more info",
    rights: "For reproduction rights"
  },
  ar: {
    authorship: "التأليف",
    backstory: "القصة وراء الصورة ",
    imagery: "الصور ذات الصلة",
    links: "الروابط",
    caption: "Caption",
    credit: "Credit",
    license: "الترخيص",
    coe: "ميثاق أخلاقيات",
    bio: "السيرة الذاتية",
    website: "الموقع الكتروني",
    info: "لمزيد من المعلومات",
    rights: "للحصول على حقوق النسخ"
  }
};
var DEFAULT_OPTS = {
  caption: false,
  credit: false,
  logo: false,
  dark: false
};
module.exports = FourCorners;

/***/ }),

/***/ 387:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ 666:
/***/ ((module) => {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : 0
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__(579);
/******/ 	FourCorners = __webpack_exports__;
/******/ 	
/******/ })()
;
//# sourceMappingURL=fourcorners.min.js.map